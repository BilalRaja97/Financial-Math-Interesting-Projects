---
title: "R Notebook"
output: html_notebook
---

```{r}
library(tidyverse)
library(dplyr)
```

```{r}
x=seq(0,1/4,by=1/4/90)
K = 100
sigma = 0.2
r = 0.02
tau = 0.2465753
mu=.1
n=.25
S0=100
Stock_price=function(sigma=.2,r=.02,mu=.1,S0=100,K=100,n=.25,sim=100){
  dt=n/90
  stock_price=matrix(NA,nrow=sim,ncol = 91)
  stock_price[,1]=S0
  for(j in 1:sim){
    for(i in 2:91){
      stock_price[j,i]=stock_price[j,i-1]*exp((mu-.5*sigma^2)*dt+sigma*(sqrt(dt)*rnorm(1,0,1)))
    }
  }
  return(stock_price)
}
```

```{r}
# obtain stock matrix with default values 
s <- Stock_price()
```


```{r}
# want to create a delta matrix so that we have a delta at each time point except last time point 

#initialize matrix
 

delta_mat <- matrix(0, nrow = 100, ncol = 91)

#loop through the number of simulations
for (i in (1:100)){
  # loop through each time point 
  for (j in (1:91)){
    if (j < (ncol(s))){
    # calculate the d1 for each stock price and tau
    d1 <- (  (log(s[i,j]/K) + ( r + 0.5*(sigma)^2 ) *x[92 - j])    )/
    (sigma*sqrt(x[92-j]))
    # assign the according delta
    delta_mat[i,j] <- pnorm(d1) - 1
    }
    else{
      if (s[i,ncol(s)]< K ){
        delta_mat[i,j] = -1
        
      }
      else{
        delta_mat[i,j] = 0 
      }
    }
     
  }
}

# have obtained the delta matrix 

```

```{r}
# create delta hedge matrix which holds the costs of the position

# assume we are only trading 1 share

share <- 1
option_share <- 0 # currently not hedging with call
d.th <- matrix(0, nrow = 100, ncol = 91)
# loop through sim
for (i in 1:100){
  # loop through time
  for (j in 1:91){
    share_cost <- share*s[i,j]*delta_mat[i,j] # cost of stock
    if (j > 1){
      interest_cost <- (exp(r*1/4/90))*share*s[i,j-1]*delta_mat[i,j-1]# cost of borrowing
    }
  else{
    interest_cost <- 0 
  }
    transactional_cost <- 0.005*share #transactional costs
    
    #sum of total cost as value of hedge
    d.th[i,j] <- share_cost + interest_cost + transactional_cost
  }
}

```


```{r}
# helper function 
max_nonzero_index <- function(a) {
   idx <- a != 0
   ifelse(any(idx), max(which(idx)), 0)
}
```


```{r}
# band based hedging

# number of share traded 

share <- 1
option_share <- 0 
band_size <- 0.05

d.bh <- matrix(0, nrow = 100, ncol = 91)
temp <- 1
for (i in 1:100){ # loop through sim
    count <- 1
  for (j in 1:91){ # loop through time
    # first case to create initial band
    if (j == 1){
      # THE BAND IS CREATED LIKE SUCH BECAUSE ITS NEGATIVE AND WE WANT TO SHOW LOWER TO GREATER VALUE 
      band <- c(delta_mat[i,1] - (band_size/2), delta_mat[i,1] + (band_size/2)) #create first band
      # calculate costs 
      transactional_cost <- 0.005*share*(delta_mat[i,j])
      
      share_cost <- share*s[i,j]*delta_mat[i,j]
      # there is no interest cost as this is the starting point .
      d.bh[i,j] <- share_cost + transactional_cost
      
    }
    # If we go out of band SINCE NEGATIVE THE LOWER VALUE IS BAND 2 
    if ( between(delta_mat[i,j],band[1],band[2]) == FALSE &  j >= 2){ # check for band size
       #UPDATE NEW BAND 
       band <- c(delta_mat[i,1] - (band_size/2), delta_mat[i,1] + (band_size/2)) 
       count <- count + 1 # number of times out of band
       #CALCULATE THE COSTS
       transactional_cost <- 0.005*share*(delta_mat[i,j] - delta_mat[i,j-temp])
       
       share_cost <- share*s[i,j]*(delta_mat[i,j] - delta_mat[i,j-temp])
                                     
       interest_cost <- (exp(r*temp/4/90))*d.bh[i,which(d.bh[i,]!=0)[count-1]]
       # reset counter for interest accruement period
       temp <- 1
       d.bh[i,j] <- share_cost + interest_cost + transactional_cost
    }else if (between(delta_mat[i,j],band[1],band[2]) == TRUE &  j >= 2) {temp <- temp+1}
    
  }

}




```

